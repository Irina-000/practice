#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <windows.h>
#include "ConWin.h"
#define _USE_MATH_DEFINES 
#define M_PI 3.14159265358979323846
#include <cmath>


using namespace std;
extern HDC hdc; // объявим  контекст устройства


HDC hdc;	// Объявим контекст устройства
            // Контекст устройства по сути это структура,
            // содержащая описание видеокарты на вашем компьютере
            // и всех необходимых графических элементов



int main(int argc, const char* argv[])
{

    // **************************************************************************************************** //
    //                                          ЧТЕНИЕ ФАЙЛА                                                //
    // **************************************************************************************************** //


    string type;
    int ord;
    string ch_ord;

    // выбор типа файла
    cout << "choose type of file:\njust tests -j\n" << "without blowout -o \nwith blowout -w\n";
    cin >> type;
    while ((type != "-j") && (type != "-o") && (type != "-w"))
    {
        cout << "wrong type! try again\n";
        cin >> type;
    }


    // выбор номера файла
    cout << "enter number of file:";
    if (type == "-j")
    {
        cout << " between 1 and 20\n";
        cin >> ord;
        while ((ord <1) || (ord > 20))
        {
            cout << "wrong number! try again\n";
            cin >> ord;
        }

    }
    else if ((type == "-o") || (type == "-w"))
    {
        cout << " between 1 and 5\n";
        cin >> ord;
        while ((ord < 1) || (ord > 5))
        {
            cout << "wrong number! try again\n";
            cin >> ord;
        }

    }

    ch_ord = to_string(ord);

    string filename;
    // создание имени файла
    filename = "C:\\Users\\User\\Desktop\\практика\\";
    if (type == "-j")
    {
        filename = filename + "просто_тесты\\" + ch_ord + ".txt";
    }
    else if (type == "-w")
    {
        filename = filename + "импульсы_с_выбросами\\" + ch_ord + ".txt";
    }
    else 
    {
        filename = filename + "импульсы_без_выбросов\\" + ch_ord + ".txt";
    }
    //cout << filename << endl;



    ifstream inputFile(filename);
    // если не существует этого файла
    if (!inputFile)
    {
        //вывод об ошибке
        cerr << "Error! Not exist!" << endl;
        return 1;
    }


    string test;
    getline(inputFile, test);                   //перенос всего содержимого в одну строку
    inputFile.close();                          //закрытие файла

    // Удаляем скобки
    // если первым символом явдяется скобка
    if (test.front() == '[')
    {
        test.erase(0, 1);
    }
    // если последним символом явдяется скобка
    if (test.back() == ']')
    {
        test.pop_back();
    }

    vector<double> num;                         // вектор удобных чисел
    vector<double> real_num;                     // вектор истинных чисел
    stringstream str(test);                     // переменная для перевода строки в набор чисел
    string number;

    while (getline(str, number, ','))           // вычленение чисел из строки, разделённых запятой
    {
        // добавление нового числа в конец вектора чисел
        real_num.push_back(stod(number));
    }

    int count = real_num.size();
    int i, j;
    double discr_per;
    int k;

    // если взят файл, в котором чисел немного
    if (type == "-j")
    {
        discr_per = 5 * pow(10, -9) * pow(10, 9);   // период дискретизации (5)
        k = 30;
    }

    // если чисел много и они очень маленькие
    else if (type == "-w")
    {
        discr_per = 5 * pow(10, -9) * pow(10, 8);   // период дискретизации (5)
        k = 7000;
    }

    // если просто чисел много 
    else 
    {
        discr_per = 5 * pow(10, -9) * pow(10, 8);   // период дискретизации (5)
        k = 30;
    }


    // удобные числа для рисовани графика
    for (i = 0; i < count; i++)
    {
        num.push_back(real_num[i] * k);
    }




    // **************************************************************************************************** //
    //                                  ВЫВОД ГРАФИКА НА КОНСОЛЬ                                            //
    // **************************************************************************************************** //


//получим дескриптор консольного окна
    HWND hwnd = GetConcolWindow();

    //если дескриптор существует
    if (hwnd != NULL)
    {
        //получим контекст устройства для консольного окна
        hdc = GetWindowDC(hwnd);

        //если контекст существует - можем работать
        if (hdc != 0)
        {

            setlocale(LC_ALL, "Russian");
            // начальные координаты, с которых будет рисоваться график
            double x0 = 700;
            double y0 = 600;
            int rad = 5;        // радиус точек

            //for (int g = 0; g < 7; g++)
            //{
            //    cout << endl;
            //}


            // оси координат
            POINT coordX[2];
            POINT coordY[2];
            coordX[0].x = x0;
            coordX[0].y = y0;
            coordX[1].x = x0 + 1200;
            coordX[1].y = y0;

            x0 = x0 + 50;
            coordY[0].x = x0;
            coordY[0].y = y0 + 70;
            coordY[1].x = x0;
            coordY[1].y = y0 - 400;


            Polyline(hdc, coordX, 2);
            Polyline(hdc, coordY, 2);

            HPEN Pen = CreatePen(PS_SOLID, 3, RGB(255,0,0));
            SelectObject(hdc, Pen);
            HBRUSH hBrush = CreateSolidBrush(RGB(255, 0, 0));
            SelectObject(hdc, hBrush);


            // рисование линий, соединяющих точки
            POINT poly[2];
            for (int i = 0; i < count - 1; i++)
            {
                poly[0].x = x0 + discr_per * i;
                poly[0].y = y0 - (num[i]);

                poly[1].x = x0 + discr_per * (i + 1);
                poly[1].y = y0 - (num[i + 1]);

                Polyline(hdc, poly, 2);
            }



            // изменение значений шага дискретизайии для удобства рисования графика и вычисления дальнейших значений
            discr_per = 5 * pow(10,-1);          // период дискретизации (0.5)
            double d_per = 5 * pow(10, 0);   
            if (type == "-w")
            {
                d_per = 5 * pow(10, -1);
                discr_per = 5 * pow(10, -4);     // период дискретизации (0.0005)
            }
            else if (type == "-o")
            {
                d_per = 5 * pow(10, -1);
                discr_per = 5 * pow(10, -2);     // период дискретизации (0.05)
            }



            // **************************************************************************************************** //
            //                                      ВЫЧИСЛЕНИЕ ПАРАМЕТРОВ                                           //
            // **************************************************************************************************** //


            int Ua_ind = 0;                 // индекс амплитуды сигнала
            double Ua_num;                  // амплитуда сигнала
            int U_a_ind = 0;                // индекс мин амплитуды сигнала
            int max_ind = 0;                // индекс максимальной амплитуды
            int max_Ua = 0;                 // значение макс ампл
            int beg_front_ind = 0;          // начало фронта
            int end_front_ind = 0;          // конец фронта
            int beg_top_ind = 0;            // начало полки импульса
            int end_top_ind = 0;            // конец полки импульса
            int beg_cut_ind = 0;            // начало среза
            int end_cut_ind = 0;            // начало среза
            int min_ind = 0;                // индекс мин ампл
            int beg_field = 0;              // начало стабильности значений после мин ампл
            bool blowout = false;           // наличие выброса




            // порядок вычисления параметров
            // 
            // начало фронта
            // минимальная амплитуда
            // макс амплитуда
            // проверка на наличие выброса
            // начало или конец среза
            // начало полки импульса
            // конец полки импульса
            // конец фронта
            // конец среза
            // поле



            int mas = count / 100;              // масштаб вычислений
            if (type == "-w")
            {
                mas = mas / 2;
            }
            else if (type == "-o")
            {
                mas = mas / 2;
            }


            double ave = 0;                      // среднее значение чисел
            bool check;
            double too_m = 0;                    // разница между вершиной и срезом


            // мин и макс числа для сравнений
            double max_num = pow(100, 2) * (-1);
            double min_num = 1000;


            double floor = tan(10 * M_PI / 180);;
            int cc;
            double ang_k;


            // кисточка, которой будут рисоваться точки
            hBrush = CreateSolidBrush(RGB(0, 0, 255));
            SelectObject(hdc, hBrush);
            Pen = CreatePen(PS_SOLID, 3, RGB(0, 0, 255));
            SelectObject(hdc, Pen);


            // нахождение начала фронта
            check = false;
            i = 0;
            // пока коэф наклона между двумя точками меньше tg10, будем продвигаться по графику
            do
            { 
                ang_k = (abs((real_num[i]) - (real_num[i + mas]))) / (discr_per * mas);
                if (ang_k > floor)
                {
                    check = true;
                }
                else
                    i++;
            } while (!check);
            beg_front_ind = i;
            Ellipse(hdc, x0 + d_per * beg_front_ind - rad, y0 - num[beg_front_ind] - rad, x0 + d_per * beg_front_ind + rad, y0 - num[beg_front_ind] + rad);
            


            //// нахождение минимальной амплитуды
            i = beg_front_ind + 1;
            for (i = beg_front_ind + 1; i < count - 1; i++)
            {
                if (real_num[i] < min_num)
                {
                    min_ind = i;
                    min_num = real_num[i];
                }
            }


            // нахождение максимальной амплитуды
            i = beg_front_ind + 1;;
            for (i = beg_front_ind + 1; i < min_ind - 1; i++)
            {
                if (real_num[i] > max_num)
                {
                    max_ind = i;
                    max_num = real_num[i];
                }
            }

            
            
            // проверка на наличие выброса
            // если нет выброса
            if  (abs(abs(real_num[max_ind]) - abs(real_num[max_ind + mas])) / (discr_per * mas) < floor)
            {
                Ua_ind = max_ind;
                Ua_num = real_num[max_ind];
                //max_ind = 0;
            }
            // если был выброс
            if (Ua_ind == 0)
            {
                blowout = true;
                Ellipse(hdc, x0 + d_per * max_ind - rad, y0 - num[max_ind] + rad, x0 + d_per * max_ind + rad, y0 - num[max_ind] - rad);
            }


            // проверка на наличие отрицательного выброса 
            // если мин значение - не выброс
            if ((abs(real_num[min_ind] - real_num[min_ind - mas]) / (discr_per*mas)) < floor)
            {
                if ((abs((real_num[min_ind]) - (real_num[min_ind + mas])) / (discr_per * mas)) < floor)
                {
                    U_a_ind = min_ind;
                    min_ind = count - 1;
                }
            }
            // если был выброс
            if (U_a_ind == 0)
            {
                blowout = true;
                Ellipse(hdc, x0 + d_per * min_ind - rad, y0 - num[min_ind] + rad, x0 + d_per * min_ind + rad, y0 - num[min_ind] - rad);
            }



            // нахождение конца среза, если нет отрицательного выброса
            if (!blowout)
            {
                check = false;
                i = U_a_ind - 1;
                do
                {
                    ang_k = (abs(real_num[i] - real_num[i - mas])) / (discr_per * mas);
                    if (ang_k > floor)
                    {
                        check = true;
                    }
                    else
                        i--;
                } while (!check);
                end_cut_ind = i;
                Ellipse(hdc, x0 + d_per * end_cut_ind - rad, y0 - num[end_cut_ind] - rad, x0 + d_per * end_cut_ind + rad, y0 - num[end_cut_ind] + rad);
                min_ind = end_cut_ind;
            }



            // нахождение начала среза
            check = false;
            i = min_ind - 1;
            do
            {
                ang_k = (abs((real_num[i]) - (real_num[i - mas]))) / (discr_per * mas);
                if (ang_k < floor)
                {
                    check = true;
                }
                else
                    i--;
            } while (!check);
            beg_cut_ind = i+1;


            // если нет выброса
            // нахождение начала полки импульса
            if (!blowout)
            {
                check = false;
                i = Ua_ind - 1;
                do
                {
                    ang_k = (abs(real_num[i] - real_num[i - mas])) / (discr_per * mas);
                    if (ang_k > floor)
                    {
                        check = true;
                    }
                    else
                        i--;
                } while (!check);
                beg_top_ind = i;
                Ellipse(hdc, x0 + d_per * beg_top_ind - rad, y0 - num[beg_top_ind] - rad, x0 + d_per * beg_top_ind + rad, y0 - num[beg_top_ind] + rad);
                //Ua_num = real_num[beg_top_ind];
                //Ua_ind = beg_top_ind;
            }



            // если есть выброс
            // нахождение начала полки импульса
            if (blowout)
            {
                check = false;
                i = beg_cut_ind - mas;
                do
                {
                    ang_k = (abs((real_num[i]) - (real_num[i - mas]))) / (discr_per * mas);
                    if (ang_k > floor)
                    {
                        check = true;
                    }
                    else
                        i--;
                } while (!check);
                beg_top_ind = i;
                Ellipse(hdc, x0 + d_per * beg_top_ind - rad, y0 - num[beg_top_ind] - rad, x0 + d_per * beg_top_ind + rad, y0 - num[beg_top_ind] + rad);
            }



            //  нахождение конца полки импульса
            check = false;
            i = beg_cut_ind - 1;
            do
            {
                ang_k = (abs((real_num[i]) - (real_num[i + mas]))) / (discr_per * mas);
                if (ang_k < floor)
                {
                    check = true;
                }
                else
                    i--;
            } while (!check);
            end_top_ind = i+mas;
            Ellipse(hdc, x0 + d_per * end_top_ind - rad, y0 - num[end_top_ind] - rad, x0 + d_per * end_top_ind + rad, y0 - num[end_top_ind] + rad);




            // если есть выброс, то амплитуда будет смотреться по началу среза
            if (blowout)
            {
                // среднее значений чисел между началом фронта и вершиной
                for (i = beg_front_ind; i < max_ind - 1; i++)
                    too_m = too_m + real_num[i];
                too_m = too_m / (max_ind - beg_front_ind);
                // если разница значений между концом вершины и началом среза слишком большая
                if (abs(real_num[end_top_ind] - real_num[beg_cut_ind]) > too_m)
                {
                    // будем считать, что срез начинается там, где заканчивается вершина
                    beg_cut_ind = end_top_ind;
                }
                Ellipse(hdc, x0 + d_per * beg_cut_ind - rad, y0 - num[beg_cut_ind] - rad, x0 + d_per * beg_cut_ind + rad, y0 - num[beg_cut_ind] + rad);
                Ua_num = real_num[beg_cut_ind];
            }


            // нахождение конца фронта
            if (!blowout)
            {
                end_front_ind = beg_top_ind;
            }
            if (blowout)
            {
                end_front_ind = max_ind-1;
                while (((real_num[max_ind] - real_num[end_front_ind]) < (real_num[max_ind] - real_num[beg_top_ind])) && (end_front_ind > beg_front_ind))
                {
                    end_front_ind = end_front_ind - 1;
                }
                if (end_front_ind <= beg_front_ind)
                {
                    end_front_ind = max_ind - 1;
                }
                Ellipse(hdc, x0 + d_per * end_front_ind - rad, y0 - num[end_front_ind] - rad, x0 + d_per * end_front_ind + rad, y0 - num[end_front_ind] + rad);
                //cout << end_front_ind << "\t" << real_num[end_front_ind] << endl;
            }





            //нахождение конца среза
            if (blowout)
            {
                check = false;
                double tt = abs(real_num[min_ind]);
                for (int d = beg_cut_ind + 1; d < min_ind; d++)
                {
                    if ((real_num[d] < tt) && (real_num[d] >= 0))
                    {
                        tt = (real_num[d]);
                        end_cut_ind = d;
                        check = true;
                    }
                }
                if (!check)
                {
                    end_cut_ind = min_ind - 1;
                }
                Ellipse(hdc, x0 + d_per * end_cut_ind - rad, y0 - num[end_cut_ind] - rad, x0 + d_per * end_cut_ind + rad, y0 - num[end_cut_ind] + rad);
            }

            



            // среднее значения чисел, идущих перед фронтом
            ave = 0;
            for (i = 0; i < beg_front_ind; i++)
            {
                ave = ave + abs(real_num[i]);
            }
            ave = ave / beg_front_ind;


            // нахождение ровного участка после мин амплитуды
            // если имеется отрицательный выброс
            if (blowout)
            {
                check = false;
                cc = 0;
                i = min_ind + 1;
                if (type == "-w")
                    mas = mas / 2;
                // пока не найдём ровный участок после мин амплитуды
                do
                {
                    for (j = 0; j < mas; j++)
                    {
                        if (abs(real_num[i+j]) < ave)
                        {
                            cc++;
                        }
                    }
                    if (cc == mas)
                    {
                        check = true;
                    }
                    else
                        i++;
                    cc = 0;
                } while (!check);
                beg_field = i;
                Ellipse(hdc, x0 + d_per * beg_field - rad, y0 - num[beg_field] - rad, x0 + d_per * beg_field + rad, y0 - num[beg_field] + rad);
                if (type == "-w")
                    mas = mas * 2;
            }



            // выводимые точки

            cout << "отображаемые точки:" << endl;
            if (blowout)
            {
                cout << "есть выбросы1) начало фронта\n2) конец фронта\n3) выброс с максимальным значением амплитуды\n4) начало полки импульса\n5) конец полки импульса\n6) начало среза\n"
                    << "7) конец среза\n8) выброс с минимальных значением амплитуды\n";
            }
            else
            {
                cout << "1) начало фронта\n2) конец фронта\n3) начало полки импульса\n4) конец полки импульса\n5) начало среза\n"
                    << "6) конец среза\n";
                min_ind = 0;
            } 


            cout << "название\tномер точки\tзначение:\n";
            //// выводы
            cout << "начало фронта\t" << beg_front_ind << "\t\t" << real_num[beg_front_ind] <<  endl;
            cout << "конец фронта\t" << end_front_ind << "\t\t" << real_num[end_front_ind] << endl;
            //cout << i << "\t" << real_num[i] << "\t" << real_num[i + 1] << "\t" << ang_k << endl;
            if (!blowout)
            {
                cout << "выброс (макс)\t-" << "\t\t   -" << endl;
            }
            else
                cout << "выброс (макс)\t" << max_ind << "\t\t" << real_num[max_ind] << endl;
            cout << "начало полки\t" << beg_top_ind << "\t\t" << real_num[beg_top_ind] << endl;
            cout << "конец полки\t" << end_top_ind << "\t\t" << real_num[end_top_ind]  << endl;
            cout << "начало среза\t" << beg_cut_ind << "\t\t" << real_num[beg_cut_ind] << endl;
            cout << "конец среза\t" << end_cut_ind << "\t\t" << real_num[end_cut_ind] << endl;
            if (!blowout)
            {
                cout << "выброс (мин)\t-"  << "\t\t   -" << endl;
            }
            else
                cout << "выброс (мин)\t" << min_ind << "\t\t" << real_num[min_ind] << endl;
            cout << endl;





            // **************************************************************************************************** //
            //                                           ВЫВОД ПАРАМЕТРОВ                                           //
            // **************************************************************************************************** //



            double part_01 = Ua_num * 0.1;
            double part_09 = Ua_num * 0.9;      
            double part_05 = Ua_num * 0.5;
            double AUn;                 
            double AU_n;                
            double time_front = 0;              // длительность фронта
            double time_work = 0;               // длительность работы сигнала
            double time_cut = 0;                // длительность среза
            double time_fr_out = 0;             // длительность выброса по переднему фронту
            double time_cut_out = 0;            // длительность выброса по заднему фронту
            int r = 0;
            int Un = 0;                         // ампл помехи (наибольшей после min)
            int U_n = 0;                        // ампл помехи (наименьшей после max)
            string mach;
            mach = " *10^(-9) c";



            if (type == "-j")
            {
                discr_per = discr_per * pow(10,0);

            }
            else if (type == "-w")
            {
                discr_per = discr_per * pow(10, 4);
            }
            else if (type == "-o")
            {
                discr_per = discr_per * pow(10, 2);
            }


            cout << "\nвывод параметров:\n\n";



            if (count == 200)
            {
                // длительность фронта
                for (r = beg_front_ind; r <end_front_ind; r++)
                {

                    time_front = time_front + discr_per;
                }
                cout << "длительность фронта:\t" << time_front << mach << endl;


                for (r = beg_cut_ind; r < end_cut_ind; r++)
                {

                    time_cut = time_cut + discr_per;
                }
                cout << "длительность среза:\t" << time_cut << mach << endl;
            }

            else
            {
                // длительность фронта
                while (real_num[r] < part_01)
                {
                    r++;
                }
                while ((real_num[r] >= part_01) && (real_num[r] <= part_09) && (r < count - 1))
                {
                    time_front = time_front + discr_per;
                    r++;
                }
                cout << "длительность фронта:\t" << time_front << mach << endl;


                // длительность среза
                r = end_top_ind;
                while (real_num[r] > part_09)
                {
                    r++;
                }
                while ((real_num[r] >= part_01) && (real_num[r] <= part_09) && (r < count - 1))
                {
                    time_cut = time_cut + discr_per;
                    r++;
                }
                cout << "длительность среза:\t" << time_cut << mach << endl;
            }





            // длительность работы сигнала
            r = beg_front_ind;
            while (real_num[r] < part_05)
            {
                r++;
            }
            while ((real_num[r] >= part_05) && (r < count - 1))
            {
                time_work = time_work + discr_per;
                r++;
            }
            cout << "длительность работы сигнала:\t"  <<  time_work << mach << endl;


            if (blowout)
            {
                // длительность выброса по переднему фронту
                r = beg_front_ind;
                while (real_num[r] < part_09)
                {
                    r++;
                }
                while ((r < beg_top_ind) && (r < count - 1))
                {
                    time_fr_out = time_fr_out + discr_per;
                    r++;
                }
                cout << "длительность выброса по переднему фронту:   " << time_fr_out << mach << endl;

                // длительность выброса по заднему фронту
                r = beg_cut_ind;
                while (real_num[r] > part_01)
                {
                    r++;
                }
                while ((r < beg_field) && (r < count - 1))
                {
                    time_cut_out = time_cut_out + discr_per;
                    r++;
                }
                cout << "длительность выброса по заднему фронту:\t" << time_cut_out << mach << endl;
            }

            else
            {
                cout << "*** нет выбросов ***\n";
                cout << "длительность выброса по переднему фронту:   " << time_fr_out << mach << endl;
                cout << "длительность выброса по заднему фронту:\t" << time_cut_out << mach << endl;
            }



            // аплитуды помех
            if (blowout)
            {
                //отрицательной
                double U_n_min = real_num[max_ind];
                for (i = max_ind + 1; i < beg_top_ind; i++)
                {
                    if (real_num[i] < U_n_min)
                    {
                        U_n_min = real_num[i];
                        U_n = i;
                    }
                }

                // положительной
                double Un_max = real_num[min_ind];
                for (i = min_ind + 1; i < beg_field; i++)
                {
                    if (real_num[i] > Un_max)
                    {
                        Un_max = real_num[i];
                        Un = i;
                    }
                }
                cout << "амплитуда положительной помехи\nUn = " << real_num[Un] << "\t" 
                     << "\nамплитуда отрицательной помехи\nU_n = " << real_num[U_n] << endl;
            }
            else 
            {
                cout << "амплитуда положительной помехи\nUn = " << 0 << "\t"
                    << "\nамплитуда отрицательной помехи\nU_n = " << 0 << endl;
            }


            double Ub01 = (real_num[max_ind] - Ua_num);                                  // амплитуда выброса по переднему фронту
            double Ub10;
            if (blowout)
                 Ub10 = real_num[min_ind];                                              // амплитуда выброса по заднему фронту
            else
                 Ub10 = 0;
            cout << "амплитуда выброса по переднему фронту\nUb01 = " << Ub01 
                 << "\nамплитуда выброса по заднему фронту\nUb10 = " << Ub10 << endl;


        }
    }//end if

    return 0;
}
